// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ProfileRole {
  ADMIN 
  PENDING 
  REQUEST
  APPROVED
}
model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  proofImageUrl String? @db.Text
  role ProfileRole @default(PENDING)
  email String @db.Text
  members Member[] 
  patients Patient[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Symptom{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  remedies Remedy[]
  diseases Disease[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Remedy{
  id String @id @default(uuid())
  name String
  symptomId String 
  symptom Symptom @relation(fields: [symptomId],references:[id],onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([symptomId])
}
model Disease{
  id String @id @default(uuid())
  name String
  symptomId String 
  symptom Symptom @relation(fields: [symptomId],references:[id],onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([symptomId])
}
enum MemberRole {
  ADMIN 
  DOCTOR 
  PATIENT
}
enum Gender {
  MALE 
  FEMALE 
  
}
enum MemberStatus {
  PENDING
  APPROVED
}
enum GenderRole {
  MALE 
  FEMALE 
}
model Member{
  id String @id @default(uuid())
  name String
  age Int
  gender GenderRole @default(MALE)
  question Question[]
  diarrhoea Diarrhoea[]
  bacteria Bacteria_Jaundice[]
  classify Classify[]
  ImpMessage String
  role MemberRole @default(PATIENT)
  profileId String
  profile Profile @relation( fields: [profileId],references: [id],onDelete: Cascade)
  MemberImageUrl String? @db.Text
  doctorProofImageUrl String? @db.Text
  doctorStatus MemberStatus @default(PENDING)
  patientStatus MemberStatus @default(PENDING)
  directMessages DirectMessage[]
  conversationInitiated Conversation[] @relation("MemberOne")
  conversationRecieved Conversation[] @relation("MemberTwo")
  totalResponses TotalResponse[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Conversation{
  id String @id @default(uuid())
  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId],references: [id],onDelete:Cascade)
  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId],references: [id],onDelete:Cascade)
  directMessages DirectMessage[]
  @@index([memberTwoId])
  @@unique([memberOneId,memberTwoId])
}
model DirectMessage{
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String?@db.Text
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  conversationId String
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([memberId])
  @@index([conversationId])
}

model Question{
  id String  @id @default( uuid())
  name String  
  subquestions SubQuestion[]
  totalResponse TotalResponse[]
  looklistens LookListenFeel[]
  members Member[] 
}
model TotalResponse{
  id String  @id @default( uuid())
  resp String 
  questionId String
  question Question @relation(fields: [questionId],references:[id],onDelete:Cascade)
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  @@index([memberId])
  @@index([questionId])

}
model SubQuestion{
  id String @id @default(uuid())
  name String
  answer String?
  questionId String @unique
  question Question @relation(fields: [questionId],references:[id],onDelete:Cascade)
  @@index([questionId])
}
model LookListenFeel{
  id String @id @default(uuid())
  name String
  answer String 
  questionId String 
  question Question @relation(fields: [questionId],references:[id],onDelete:Cascade)
  signs Sign[]
  @@index([questionId])
}
model Sign{
  id String  @id @default(uuid())
  name String 
  looklistenId String 
  looklisten LookListenFeel @relation(fields: [looklistenId],references:[id],onDelete:Cascade)
  @@index([looklistenId])
}
model Classify{
  id String @id @default(uuid())
  name String 
  treatments Treatment[]
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  bacteriaId String
  bacteria Bacteria_Jaundice @relation(fields: [bacteriaId],references: [id],onDelete: Cascade)
  @@index([memberId])
  @@index([bacteriaId])
}
model Treatment{
  id String @id @default(uuid())
  name String 
  classifyId String
  classify Classify @relation(fields: [classifyId],references:[id],onDelete:Cascade)
  @@index([classifyId])
}
model Bacteria_Jaundice{
  id String @id @default(uuid())
  Convulsion Boolean?
  FastBreathing Boolean?
  SevereChestIndrawing Boolean?
  NasalFlaring Boolean?
  TenOrMorePustules Boolean?
  LethargicOrUnconcious  Boolean?
  LessThanNormalMovements Boolean?
  UmbilicusRedOrDraining Boolean?
  PusDischargeFromEar Boolean?
  PalmsAndSolesYellow Boolean?
  AgeLessThan24HrsOrMore Boolean?
  Age14DaysOrMore Boolean?
  PalmsAndSolesNotYellow Boolean?
  TemperatureBetween35and36Degree Boolean?
  classify Classify[]
   memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  @@index([memberId])
}
model Diarrhoea{
  id String @id @default(uuid())
  howlong Boolean?
  LethargicorUnconsious Boolean?
  RestlessIrritable Boolean
  sunkenEyes Boolean
  pinchSkinAbdomen Boolean
   memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  @@index([memberId])
}
model Patient{
  id String @id @default(uuid())
  name String 
  age Int
  sex String
  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  records Record[]
  dieas Diea[]
}
model Record{
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId],references: [id],onDelete: Cascade)
  symptomRecord String
  diseaseRecord String
  additionalSymptomRecord String?
  result String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Diea{
  id String @id @default(uuid())
  name String 
  questions1 Question1[]
  questions2 Question2[]
  patientId String
  patient Patient @relation(fields:[patientId],references: [id],onDelete:Cascade)
  @@index([patientId])
}
model Question1{
  id String @id @default(uuid())
  name String
  count Int @default(0)
  dieaId String
  diea Diea @relation(fields:[dieaId],references: [id],onDelete: Cascade)
  @@index([dieaId])
}
model Question2{
  id String  @id @default(uuid())
  name String 
  count Int @default(0)
    dieaId String
  diea Diea @relation(fields:[dieaId],references: [id],onDelete: Cascade)
  @@index([dieaId]) 
}
model Diseasea{
  id String @id @default(uuid())
  name String
  symptomas Symptoma[]
  treatmenta Treatmenta[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Symptoma{
  id String @id @default(uuid())
  name String
  diseaseaId String
  diseasea Diseasea @relation(fields: [diseaseaId],references: [id],onDelete: Cascade) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([diseaseaId])
}
model Treatmenta{
   id String @id @default(uuid())
  name String
  diseaseaId String
  diseasea Diseasea @relation(fields: [diseaseaId],references: [id],onDelete: Cascade) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([diseaseaId])
}